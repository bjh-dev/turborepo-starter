import { render, screen } from '@testing-library/react'
import { {{pascalCase name}}Component } from './{{kebabCase name}}.component'

describe('{{pascalCase name}}Component', () => {
  {{#if (eq template "basic")}}
  it('renders heading and text', () => {
    const props = {
      heading: 'Test Heading',
      text: 'Test text content',
    }
    
    render(<{{pascalCase name}}Component {...props} />)
    
    expect(screen.getByText('Test Heading')).toBeInTheDocument()
    expect(screen.getByText('Test text content')).toBeInTheDocument()
  })

  it('renders without text', () => {
    const props = {
      heading: 'Test Heading',
    }
    
    render(<{{pascalCase name}}Component {...props} />)
    
    expect(screen.getByText('Test Heading')).toBeInTheDocument()
  })
  {{/if}}

  {{#if (eq template "hero")}}
  it('renders hero content', () => {
    const props = {
      heading: 'Hero Title',
      subheading: 'Hero subtitle',
      image: '/test-image.jpg',
      imageAlt: 'Test image',
      cta: {
        label: 'Get Started',
        link: '/signup',
      },
    }
    
    render(<{{pascalCase name}}Component {...props} />)
    
    expect(screen.getByText('Hero Title')).toBeInTheDocument()
    expect(screen.getByText('Hero subtitle')).toBeInTheDocument()
    expect(screen.getByText('Get Started')).toBeInTheDocument()
    expect(screen.getByRole('img')).toHaveAttribute('src', '/test-image.jpg')
    expect(screen.getByRole('img')).toHaveAttribute('alt', 'Test image')
  })
  {{/if}}

  {{#if (eq template "card-list")}}
  it('renders card list', () => {
    const props = {
      heading: 'Card List',
      cards: [
        {
          title: 'Card 1',
          description: 'Description 1',
          image: '/card1.jpg',
          imageAlt: 'Card 1 image',
          link: '/card1',
        },
        {
          title: 'Card 2',
          description: 'Description 2',
          image: '/card2.jpg',
          imageAlt: 'Card 2 image',
          link: '/card2',
        },
      ],
    }
    
    render(<{{pascalCase name}}Component {...props} />)
    
    expect(screen.getByText('Card List')).toBeInTheDocument()
    expect(screen.getByText('Card 1')).toBeInTheDocument()
    expect(screen.getByText('Card 2')).toBeInTheDocument()
    expect(screen.getByText('Description 1')).toBeInTheDocument()
    expect(screen.getByText('Description 2')).toBeInTheDocument()
  })
  {{/if}}

  {{#if (eq template "testimonial")}}
  it('renders testimonial', () => {
    const props = {
      quote: 'This is an amazing product!',
      author: {
        name: 'John Doe',
        title: 'CEO',
        company: 'Test Company',
      },
      image: '/author.jpg',
      imageAlt: 'John Doe',
    }
    
    render(<{{pascalCase name}}Component {...props} />)
    
    expect(screen.getByText('This is an amazing product!')).toBeInTheDocument()
    expect(screen.getByText('John Doe')).toBeInTheDocument()
    expect(screen.getByText('CEO')).toBeInTheDocument()
    expect(screen.getByText('Test Company')).toBeInTheDocument()
    expect(screen.getByRole('img')).toHaveAttribute('src', '/author.jpg')
  })
  {{/if}}

  {{#if (eq template "custom")}}
  it('renders custom component', () => {
    render(<{{pascalCase name}}Component />)
    
    expect(screen.getByText('Custom Component')).toBeInTheDocument()
  })
  {{/if}}

  it('applies custom className', () => {
    const props = {
      {{#if (eq template "basic")}}
      heading: 'Test Heading',
      {{/if}}
      {{#if (eq template "hero")}}
      heading: 'Hero Title',
      {{/if}}
      {{#if (eq template "card-list")}}
      heading: 'Card List',
      cards: [],
      {{/if}}
      {{#if (eq template "testimonial")}}
      quote: 'Test quote',
      author: { name: 'Test Author' },
      {{/if}}
      className: 'custom-class',
    }
    
    const { container } = render(<{{pascalCase name}}Component {...props} />)
    
    expect(container.firstChild).toHaveClass('custom-class')
  })
}) 